/**
 * Clk manager for silabs gecko family of microcontrollers
 *
 *  All rights reserved.
 *  Tiny Labs Inc
 *  2019
 */

// Automatically generated by building clock tree
#include "target_clock.h"
#include <leos/iClkMgr.h>
#include <leos/reg.h>

/**
 * Gecko CMU register interface
 */
typedef struct {
  REG32 CTRL;
  REG32 HFCORE_DIV;
  REG32 HFPER_DIV;
  REG32 HFRCO_CTRL;
  REG32 LFRCO_CTRL;
} reg_t;

class GeckoClkMgr : public iClkMgr {
private:
  uint32_t hfxo, lfxo;
  
public:
  GeckoClkMgr (int idx, int cnt, va_list ap);
  ~GeckoClkMgr () {}

  // Common interface
  int Setup (const char *args);
  void Cleanup (void);

  //  iClkMgr interface
  uint32_t Get (node_t node);
  int Set (node_t node, uint32_t val);
};

GeckoClkMgr::GeckoClkMgr (int idx, int cnt, va_list ap)
  : iClkMgr (idx)
{

}

int GeckoClkMgr::Setup (const char *args)
{
  return 0;
}

void GeckoClkMgr::Cleanup (void)
{

}

uint32_t GeckoClkMgr::Get (node_t node)
{
  switch (node) {
    case HFXO:
      return hfxo;

    case LFXO:
      return lfxo;

    case HFRCO:
      
  }

  // Unknown
  return 0;
}

int GeckoClkMgr::Set (node_t node, uint32_t val)
{
  switch (node) {
    case HFXO:
      hfxo = val;
      break;

    case LFXO:
      lfxo = val;
      break;

    case HF_SEL:
      switch (val) {
        case HFRCO:
        case HFXO:
        case LFRCO:
        case LFXO:
          break;
      }
  }

  /* If an oscillator was selected wait for it to stabilize */
  
  return 0;
}

// Export object
EXPORT_OBJ (GeckoClkMgr, NORMAL);
